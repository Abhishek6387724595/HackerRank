#include <bits/stdc++.h>

using namespace std;

/*
 * Complete the runningMedian function below.
 */
vector<double> runningMedian(vector<int> a) {

        vector<double> ans;

        int diff=0;

        priority_queue<int> high;
        priority_queue<int,vector<int>,greater<int>> low;

        for(int i=0;i<a.size();i++)
        {
            if(low.size()==0||a[i]>low.top())
            {
                low.push(a[i]);
                //cout<<low.top()<<endl;
            }
            else
            {
                high.push(a[i]);
            }
            diff=low.size()-high.size();

            if(abs(diff)>=2)
            {
                if(low.size()>high.size())
                {
                    high.push(low.top());
                    low.pop();         
                }
                else
                {
                    low.push(high.top());
                    high.pop();
                }
            }
            if(low.size()==high.size())
            {
                ans.push_back((double)(low.top()+high.top())/2);
            }
            else
            {
                if(low.size()>high.size())
                {
                    ans.push_back(low.top());
                }
                else
                {
                    ans.push_back(high.top());
                }
            }
        }
        return ans;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<int> a(n);

    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        a[i] = x;
    }

    vector<double> v2 = runningMedian(a);

    for (int i = 0; i < v2.size(); i++) {
        fout << v2[i];

        if (i != v2.size () - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}
